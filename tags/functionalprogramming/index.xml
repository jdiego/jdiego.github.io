<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FunctionalProgramming on Terminal</title>
    <link>https://jdiego.github.io/tags/functionalprogramming/</link>
    <description>Recent content in FunctionalProgramming on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Jul 2021 23:41:27 -0300</lastBuildDate><atom:link href="https://jdiego.github.io/tags/functionalprogramming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thinking Functionally</title>
      <link>https://jdiego.github.io/posts/thinking-functionally/</link>
      <pubDate>Sun, 11 Jul 2021 23:41:27 -0300</pubDate>
      
      <guid>https://jdiego.github.io/posts/thinking-functionally/</guid>
      <description>Functions as first class citizens In the functional programming world, functions are treated like ordinary values. They can be stored into variables, put into collections, passed to other functions as arguments, and returned from other functions as results. Thus, the first-class functions behave like a regular data. Functions that take other functions as arguments or that return new functions are called higher-order functions. Higher-order functions are closely related to first-class functions in that higher-order functions and first-class functions both allow functions as arguments and results of other functions.</description>
      <content>&lt;h1 id=&#34;functions-as-first-class-citizens&#34;&gt;Functions as first class citizens&lt;/h1&gt;
&lt;p&gt;In the functional programming world, functions are treated like ordinary values. They can be stored into variables, put into collections, passed to other functions as arguments, and returned from other functions as results. Thus, the first-class functions behave like a regular data. Functions that take other functions as arguments or that return new functions are called higher-order functions. Higher-order functions are closely related to first-class functions in that higher-order functions and first-class functions both allow functions as arguments and results of other functions. So maybe you are asking: What&amp;rsquo;s the difference between this two concepts?&lt;/p&gt;
&lt;p&gt;The distinction between the two is subtle: &amp;ldquo;higher-order&amp;rdquo; describes a mathematical concept of functions that operate on other functions, while &amp;ldquo;first-class&amp;rdquo; is a computer science term for programming language entities that have no restriction on their use, as explained before, thus first-class functions can appear anywhere in the program that variables can, including as arguments to other functions and as their return values.&lt;/p&gt;
&lt;p&gt;In the previous post, we discussed how to build programs more concise and efficient by describing what the program should do on a higher abstraction level instead of implementing everything by hand. Higher-order functions are essential for that task. Higher-order functions allow us to apply a function to its arguments one at a time, with each application returning a new function that accepts the next argument. This technique is called partial application or currying. Currying enables a programmer to succinctly express, for example, the successor function as the addition operator partially applied to the natural number one.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s illustrate this with an example. Imagine that you have a group of people, and need to write the names of all the devs in the group.&lt;/p&gt;
&lt;p&gt;The first higher-level construct you could use here is collection filtering. Roughly speaking, filtering is an algorithm that checks whether an element in the original collection satisfies a predicate (a boolean condition); if it does, the element is put into the result. The filtering algorithm can&amp;rsquo;t know in advance what predicates users will use to filter their collections. Filtering could be done on a specific attribute, on multiple attributes at the same time, or on a more complex condition. So, the filtering algorithm needs to provide a way for the user to specify the predicate.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s back to our example; the filtering requires a predicate that takes a person and returns whether the person is a developer or not. Since filtering allows you to pass a predicate function to it, filtering is, by definition, a higher-order function. We can resolve this problem by using STL algorithms.&lt;/p&gt;
&lt;p&gt;Remember that: we usually don&amp;rsquo;t want to change the original collection because we aim to be as pure as possible; thus, we can use the std::copy_if algorithm. The std::copy_if algorithm copies elements from a source range for which a predicate returns true, so you can think of it as operating as a filter. The first two arguments are input iterators that define the source range, the third argument is an output iterator that points to the first position in the destination range, and the fourth argument is the predicate. Because we don&amp;rsquo;t know the number of developers in advance, we need to create an empty vector of developers and use std::back_inserter as the destination iterator.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;person_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; devs;    
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_dev&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; person_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; person);

std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;copy_if(people.cbegin(), people.cend(), std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;back_inserter(devs), is_dev);    

&lt;span style=&#34;color:#75715e&#34;&gt;// A naive implementation for the filter concept - just for local use
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The filter construct takes a collection - a vector in our case
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// and a predicate function (T → bool) as arguments, and 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// it returns a collection of filtered items, so its type is written like this:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T, &lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; Predicate&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; filter(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; input, Predicate pred)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; results;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;copy_if(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;begin(input), std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;end(input), std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;back_inserter(results), pred);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; results;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; devs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter(people, is_dev);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the filtering, we have the developers but not their names. So, we still have a job to do. We need another construction, and in this time, we need a construct that takes a group of people and returns their names. Similar to filtering, this construct does not know in advance what information we want to collect from the original elements. We might want to get a specific attribute, combine multiple attributes, or do something more customized.&lt;/p&gt;
&lt;p&gt;In summary, the construct needs to allow the user to specify the function that takes an item from the collection, does something with it, and returns a value that will be put into the resulting collection. This construct is called map or transform, and the output collection does not need to contain items of the same type as the input collection (unlike with filtering). We can use the std::transform algorithm.&lt;/p&gt;
&lt;p&gt;The std::algorithm provides two abilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first form has four arguments. It transforms elements from a source to a destination range. Thus, this form copies and modifies elements in one step.&lt;/li&gt;
&lt;li&gt;The second form has five arguments. It combines elements from two source sequences and writes the results to a destination range.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here, we will use the first form. So, we need to pass the input collection as a pair of iterators, the transformation function, and where the results should be stored. In this case, we know that the number of names is the same as the number of developers in the group, so we can immediately create the names vector to be the size required to store the result and use names.begin() as the destination iterator instead of relying on std::back_inserter, as we did before. This way, we will eliminate the potential memory reallocations needed for vector resizing. After all, we are C++ programmers, and performance matters, right?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; names(devs.size());  
&lt;span style=&#34;color:#75715e&#34;&gt;// The transform algorithm should call the transformation function for each of them and collect the results. 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// In this case, you’re passing it a function that returns the name of a developer. 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// The transform algorithm collects the name of every person into a new collection.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;transform(devs.cbegin(), devs.cend(), names.begin(), name);    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we compose the filter and map (or transform) constructs by passing the result of one as the input for the other, we get the solution to the original problem: the names of all developers in the given group of people.&lt;/p&gt;
&lt;h2 id=&#34;folding-and-tail-recursion&#34;&gt;Folding and tail recursion&lt;/h2&gt;
&lt;p&gt;Recursion is an essential concept in computer science. Once we can naturally express many computational problems using some form of recursion and prove the properties of such programs using some form of induction.  Indeed, in the functional approach to programming, recursion and induction are the essential tools for defining and proving the properties of programs.  But, just as in imperative languages where it is preferable to use structured iteration constructs such as for/while-loops instead of unstructured gotos, it is advantageous to use structured recursion operators instead of unrestricted recursion when using functional language. Thus, in functional programming, we have the fold abstraction.&lt;/p&gt;
&lt;p&gt;A fold or reduction is a high order function that abstracts the process of reducing or collapsing (or folding) a list or recursive structures (such as vectors, lists, and so) into a single value. So, fold is a standard recursion operator that encapsulates a common pattern of recursion for processing lists. It abstracts away the recursive process of the function definition for a very common use case - producing an accumulated result by processing each element in a collection.
The abstract reasoning behind the folding is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If I can do something to the first item in the list and the first item in the rest of the list&lt;/li&gt;
&lt;li&gt;Then I can do something to the whole list.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, typically, a fold deals with two things: a combining function, and a data structure, typically a list of elements. The fold then proceeds to combine elements of the data structure using the function in some systematic way.&lt;/p&gt;
&lt;h3 id=&#34;back-to-basics&#34;&gt;Back To Basics&lt;/h3&gt;
&lt;p&gt;We will now take a look at a simple example. Imagine were were given the task of summing up the numbers of a list. For example the sum of [1, 2, 3, 4] = 1+ 2 + 3 + 4 = 10.&lt;br&gt;
In C++, we might write the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// summing up the list imperatively
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; sum(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; numbers){
    T total_sum {}; &lt;span style=&#34;color:#75715e&#34;&gt;// calling the default ctor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; number: numbers){
        total_sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; number;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total_sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although this approach works, it&amp;rsquo;s unnecessarily verbose. There are a few places where you might make a mistake, such as making a typo in the loop; nevertheless, this code also defines an inherently serial implementation for summing. Before moving on, let&amp;rsquo;s take a second to think about what we are coding in this example.
We might want to use a hypothetical function fold to write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fold (+) [1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this instance, to a rough approximation, you can think fold as replacing the commas in the list with the + operator. Notice that we are applying an operation accepting two parameters (binary function): the accumulated result and the current element of the list. The operation functions must produce a new value.&lt;/p&gt;
&lt;p&gt;Now suppose we want to find whether or not a list of booleans is made out of true values only, we can write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// find whether of not a lsit of booleans is amde of true values only imperatively
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;all_true&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; list_of_booleans){
    T result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; boolean: booleans){
        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boolean and result;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that both functions look almost identical.  With the exception of the different types and different operation ( and (&amp;amp;&amp;amp;) vs +), both functions are equivalent. So, what&amp;rsquo;s going on? Let&amp;rsquo;s think in baby steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We define an initial value (total_sum is 0 and result is true). This initial value is also called the Identity Value or the Neutral Element.&lt;/li&gt;
&lt;li&gt;We are going through all the elements within the input list (traversing the list).&lt;/li&gt;
&lt;li&gt;We are doing an operation inside the for-loop, in our case was plus, and accumulating the result before returning it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In general, folding doesn&amp;rsquo;t require the arguments and the binary function&amp;rsquo;s result to have the same type. Folding takes a collection that contains items of type &lt;code&gt;T&lt;/code&gt;, an initial value of type&lt;code&gt;R&lt;/code&gt; (which doesn&amp;rsquo;t need to be the same as T), and a function &lt;code&gt;f: (R, T) =&amp;gt; R&lt;/code&gt;. It calls the specified function on the initial value, called identity function, and the first item in the collection. The result is then passed to the function &lt;code&gt;f&lt;/code&gt; along with the next item in the collection. This is repeated until all items from the collection are processed. The algorithm returns the value of type &lt;code&gt;R&lt;/code&gt;: the value that the last invocation of function &lt;code&gt;f&lt;/code&gt; returned.&lt;/p&gt;
&lt;p&gt;Thus, the choice of the initial value is not random. There is a relationship between the operation you are using and the initial value, also called Identity Value: Assume the operation is any binary function called operation and the initial value is given by a identity function, then you can deduce the identity value used as inital value derives from the relationship: operation(identity, x) = x. Therefore, it follows that the Identity Value for the + (plus) operation is 0 because: &lt;code&gt;x = x + 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;std::accumulate&lt;/code&gt; algorithm is an implementation of a general concept called folding (or reduction); it first sums the initial value passed to it and the first item in the collection. That result is then summed with the next item in the collection, and so on. This is repeated until you reach the end of the collection.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Introduction to Functional Programming</title>
      <link>https://jdiego.github.io/posts/intro-fp/</link>
      <pubDate>Tue, 15 Jun 2021 10:32:20 -0300</pubDate>
      
      <guid>https://jdiego.github.io/posts/intro-fp/</guid>
      <description>Introduction to Functional Programming (FP) Functional Programming (FP) is an old programming paradigm that was born in academia during the 1950s; it stayed restrict tied to that environment for decades. Although it was always a hot topic for scientific researchers, it was never popular in the industry. Instead, imperative languages (procedural and object-oriented) became the mainstream programming languages.
However, in the past few years, we have seen a boost in the popularity of the functional programming paradigm.</description>
      <content>&lt;h1 id=&#34;introduction-to-functional-programming-fp&#34;&gt;Introduction to Functional Programming (FP)&lt;/h1&gt;
&lt;p&gt;Functional Programming (FP) is an old programming paradigm that was born in academia during the 1950s; it stayed restrict tied to that environment for decades. Although it was always a hot topic for scientific researchers, it was never popular in the industry. Instead, imperative languages (procedural and object-oriented) became the mainstream programming languages.&lt;/p&gt;
&lt;p&gt;However, in the past few years,  we have seen a boost in the popularity of the functional programming paradigm. However, instead of functional programming languages becoming the most popular, something else is happening: the most popular programming languages have started introducing features inspired by functional programming languages. Consequently, we can state that functional programming has burst the academic bubble and now it is among us, albeit in an unexpected way, but life is complicated.&lt;/p&gt;
&lt;p&gt;But, what is functional programming after all? Well, answering this question is very complicated because no widely accepted definition exists. But don&amp;rsquo;t panic. The lack of a broadly accepted definition it&amp;rsquo;s quite common when we are talking about programming languages,  and being honest it&amp;rsquo;s common in other computer science topics&amp;hellip;&lt;/p&gt;
&lt;p&gt;People usually tend to define FP through features related to functional concepts in their favourite language. In the FP context, concepts including pure functions, lazy evaluation, pattern matching are frequently mentioned. But defining functional programming in this way is alienate people. The focus shouldn&amp;rsquo;t be on particular language features. We need a better definition to avoid language bias. And I know that many object-oriented programming books apply this strategy to define what is an object-oriented language, but it&amp;rsquo;s out of scope for now, and this isn&amp;rsquo;t the way definitely.&lt;/p&gt;
&lt;p&gt;In programming, we keep decomposing a problem until you reach the level of detail that you can deal with, solve each subproblem in turn, and re-compose the solutions bottom-up. There are, roughly speaking, two ways of doing it: by commanding the computer what to do, or by telling it how to do it. This difference originated the terms &lt;em&gt;declarative&lt;/em&gt; and &lt;em&gt;imperative&lt;/em&gt; programming.&lt;/p&gt;
&lt;p&gt;Broadly speaking, Functional Programming is a declarative &lt;em&gt;style of programming&lt;/em&gt; in which the main program building blocks are functions as opposed to objects and procedures. A program written in the functional style doesn’t specify the instructions that should be performed to produce the outcome but rather it defines what the outcome is.&lt;/p&gt;
&lt;p&gt;Be advised: The way we write a function in the functional paradigm is different from the way we write functions in the procedural style. Functional programming focuses on expressions, while Procedural programming focuses on statements.  Don&amp;rsquo;t worry, I know that things can be a bit blurry now. Then, let&amp;rsquo;s consider a small example to illuminate our thoughts: A program to calculate the sum of a list of numbers.&lt;/p&gt;
&lt;p&gt;The imperative version of this program is usually described as a sequence of actions ordered in time.  Thus we implement this by iterating over the number list and adding the numbers to the accumulator variable. So, we are just describing the sequence of interdependent steps (fine-grained instructions) of how to sum a list of numbers and modifying the state of some conceptual state machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accumulate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; numbers) 
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; acc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; number : nuumbers)
        acc &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; number;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the other hand, in the declarative version, you need to define only what a sum of a list of numbers is. The computer knows what to do when it’s required to calculate a sum. One way you can do this is to say that the sum of a list of numbers equals the first element of the list added to the sum of the rest of the list and that the sum is zero if the list is empty. You define what the sum is without explaining how to calculate it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; iterator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;iterator;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accumulate_impl&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; iterator begin, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; iterator end)
{ 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (begin &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; end) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;begin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; accumulate_impl(begin &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, end) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accumulate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; numbers)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; accumulate_impl(numbers.cbegin(), numbers.cend());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can notice that the code presented above avoids state and mutable data. It emphasizes the application of functions. Also, we can see that iteration isn&amp;rsquo;t the predominant control structure anymore.&lt;/p&gt;
&lt;h2 id=&#34;imperative-vs-declarative-programming&#34;&gt;Imperative vs. Declarative programming&lt;/h2&gt;
&lt;p&gt;This post could be very abstract until this moment, so to clarify the concepts, let&amp;rsquo;s look at a more elaborate but still simple program implemented in the imperative style and its functional equivalent. The main goal here is demonstrate the difference between these two approaches.&lt;/p&gt;
&lt;p&gt;Here we go: Imagine that we want to write a function that takes a list of files and calculates the number of lines in each. I assume for simplicity that the last line in the file also ends with a newline character, so we need to count only the number of newline characters in the current file.&lt;/p&gt;
&lt;p&gt;Reasoning imperatively, you might implement the solution decomposing it into the following steps :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open each file.&lt;/li&gt;
&lt;li&gt;Define a counter to store the number of lines.&lt;/li&gt;
&lt;li&gt;Read the file one character at a time, and increase the counter every time the newline character (\n) occurs.&lt;/li&gt;
&lt;li&gt;At the end of a file, store the number of lines calculated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following algorithm implements the steps listed before. In summary, we are reading the files character by character and counts the number of newline characters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Calculating the number of lines the imperative way
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count_lines&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; filename)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; new_line_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ifstream infile(filename);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; ch;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (infile.get(ch)) 
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ch &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;)
            new_line_count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new_line_count;
}
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; count_lines_in_files(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; files)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lines_in_each_file(files.size());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; file : files) 
    {
        lines_in_each_file.push_back(count_lines(file));
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lines_in_each_file;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we are moving this code to a more functional one. The first version exploits a set of C++ abstractions, such as use the standard std::count algorithm instead of counting the number of newlines manually and the stream iterators  that allow us to treat the I/O streams similarly to ordinary collections like lists and vectors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//functionalizing the code.... 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count_lines&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; filename)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ifstream infile(filename);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;count(
                   std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;istreambuf_iterator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(infile),           
                   std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;istreambuf_iterator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);
}
&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; count_lines_in_files(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; files)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lines_in_each_file(files.size());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; file : files) 
    {
        lines_in_each_file.push_back(count_lines(file)); 
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lines_in_each_file;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we compare the solutions presented above, we can notice that the main change occurred on the &lt;code&gt;count_lines&lt;/code&gt; function.
Now, his only task is to convert its input (the filename) to the type that &lt;code&gt;std::count&lt;/code&gt; can understand: a pair of stream iterators. In this way, we are no longer concerned about how to implement the counting new lines algorithm. We are just declaring that we want to count the number of newlines that appears in the given input stream.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s quite common to use the number of lines of code (LOC) to measure the complexity of a program. Although LOC can perfectly express the difference in the complexity between imperative and functional solutions, I prefer to highlight another benefit from the functional solution: The fewer state variables to worry about. Each program has an implicity conceptual state machine binds to it. The correct management of state changes into a program is one of the most significant sources of software bugs. I believe that by reducing the number of states to keep track, we reducing the number of bugs.&lt;/p&gt;
&lt;p&gt;Therefore, the main idea in the functional style is to use
abstractions to express the higher-level intent of an algorithm instead of specifying how to do something.&lt;/p&gt;
&lt;p&gt;But, we can do even better. We can convert the entire algorithm to functional style, a.k.a. we are going to specify what should be done, instead of how it should be done. I know that I&amp;rsquo;m being repeating but it&amp;rsquo;s important to consolidate this principle in our minds.&lt;/p&gt;
&lt;p&gt;To start, we need an abstraction that allows us to applies a function to all elements in a collection and collects the results. Fortunately, The STL designed the &lt;code&gt;std::transform&lt;/code&gt; algorithm for this. Essentially, the &lt;code&gt;std::transform&lt;/code&gt; abstraction applies a function to each element of a range defined by a pair of iterators and write the results somewhere.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; count_lines_in_files(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; files)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lines_in_each_file(files.size());
    &lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;transform(
        files.cbegin(), files.cend(), 
        lines_in_each_files.begin(), 
        count_lines                
    );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lines_in_each_files;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The new implementation of the &lt;code&gt;count_lines_in_files&lt;/code&gt; applies the &lt;code&gt;std::transform&lt;/code&gt; in each element of the files collection one by one,
transforms them using the &lt;code&gt;count_lines&lt;/code&gt; function, and stores the resulting values in the &lt;code&gt;lines_in_each_file&lt;/code&gt; vector.&lt;/p&gt;
&lt;p&gt;This code no longer specifies the algorithm steps that need to be taken, but rather how the input should be transformed in order to
get the desired output. But, what&amp;rsquo;s the big deal here? This solution makes the code less prone to errors, since it removes the state
variables, and rely on the standard library implementation of the counting algorithm instead of rolling your own.&lt;/p&gt;
&lt;h2 id=&#34;bonus-track-range-library---c20&#34;&gt;BONUS TRACK: Range Library - C++20&lt;/h2&gt;
&lt;p&gt;We can remove the boilerplate code from the previous functional solutions to be considered more readable than the imperative version.
We can use the C++ 20 std::ranges library to do it. (I think that we can talk about ranges in near future, ranges concepts will be a big improvement on STL).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count_lines&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; filename)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ifstream in(filename);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;count( 
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;istreambuf_iterator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(in), 
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;istreambuf_iterator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);
}

std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; count_lines_in_files(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; files)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; rng &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; files 
                &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; ranges&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;views&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;transform(count_lines);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(rng.begin(), rng.end());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This solution is much less verbose than the imperative solution and much more obvious.&lt;/p&gt;
&lt;h2 id=&#34;pure-functions&#34;&gt;Pure functions&lt;/h2&gt;
&lt;p&gt;One of the most significant sources of software bugs is program state management. Every program has an implicity state machine binds to him.  It’s difficult to keep track of all possible states of a program and its transitions. The OOP paradigm provides the means to group parts of the state into objects, thus making it easier to manage. But it doesn’t significantly reduce the number of possible states neither the number of possible transitions.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bartoszmilewski.com/2015/04/15/category-theory-and-declarative-programming/&#34;&gt;https://bartoszmilewski.com/2015/04/15/category-theory-and-declarative-programming/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.webix.com/difference-between-declarative-and-imperative-programming-with-language-examples/&#34;&gt;https://blog.webix.com/difference-between-declarative-and-imperative-programming-with-language-examples/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Functional Programming in C++&lt;/li&gt;
&lt;li&gt;Learning C++ Functional Programming&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
